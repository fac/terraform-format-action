name: Terraform Format
description: Checks the terraform formatting, formats if broken and pushes the changes back to the branch. 
inputs:
  terraform-version:
    description: "Install the version of terraform. By default (empty) use .terraform-version file"
    default: ""
  fix-format:
    description: "Auto fix broken formatting and push a commit"
    default: false
  tick-autofix-commit:
    description: "Add a successful check for the auto fix commit"
    default: true
outputs:
  commit-id:
    description: "The ID of the commit created when fix-format is true"
    value: ${{ steps.tf-fmt-check.outputs.commit-id }}

runs:
  using: "composite"
  steps:
    - name: Set TERRAFORM_VERSION
      shell: bash
      run: |
        if [[ -n "${{ inputs.terraform-version }}" ]]; then
          echo "TERRAFORM_VERSION=${{ inputs.terraform-version }}" >> $GITHUB_ENV
        else
          if [[ ! -f .terraform-version ]]; then
            echo "::error::No .terraform-version found and input terraform-version not set"
            exit 10
          fi
          echo "TERRAFORM_VERSION=`cat .terraform-version`" >> $GITHUB_ENV
        fi

    - name: Terraform Install
      shell: bash
      run: |
        OS=linux
        ARCH=amd64
        zipFile="terraform_${TERRAFORM_VERSION}_${OS}_$ARCH.zip"
        echo Installing terraform v$TERRAFORM_VERSION $zipFile
        wget --no-verbose "https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/$zipFile"
        unzip -o "$zipFile"
        rm -f "$zipFile"
        ./terraform version

    - name: Terraform Format Check
      id: tf-fmt-check
      shell: bash
      env:
        INPUT_FIX_FORMAT: ${{ inputs.fix-format }}
      run: |
        echo Checking Terraform format
        if ./terraform fmt -check -diff -recursive; then
          echo "Terraform is properly formatted"
          exit 0
        fi
        if [[ $INPUT_FIX_FORMAT != true ]]; then
          echo
          echo ::error::Terraform formatting errors detected. See log for diff with detail. To fix, run locally: terraform fmt -recursive
          echo
          exit 10
        fi

        echo "Running Terraform format"
        ./terraform fmt -recursive

        if git diff-index --quiet HEAD --; then
            echo No changes
            exit 0
        fi
        # Use the current commits author
        git config user.name "$(git log -1 --pretty=format:%an)"
        git config user.email "$(git log -1 --pretty=format:%ae)"
        git commit -a -m "AutoFix: Terraform format"
        git show -s | cat
        git push
        echo ::set-output name=commit-id::$(git rev-parse HEAD)
      - name: Update check for new commit
        if: steps.tf-fmt-check.outputs.commit-id && inputs.tick-autofix-commit
        run: |
          curl \
            --silent \
            --show-error \
            --fail \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d '{ "name": "'${{ github.job }}'", "head_sha": "'${{ steps.tfFmt.outputs.commit-id }}'", "status": "completed", "conclusion": "success", "output": { "title": "Autofix check", "summary": "Created from https://github.com/'${{ github.repository }}'/actions/runs/'${{ github.run_id }}'" } }'
